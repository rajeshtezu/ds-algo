A process ( a function in our case) that calls itself.

eg. 1. JSON.parse()
    2. JSON.stringify()
    3. document.getElementById() and DOM traversal algorithms
    4. Object traversal

=> Call Stack:
    Manages what happens when functions are invoked.
    
    function called -> pushed
    function return -> pop

When we write recursive functions, we keep pushing new functions onto the call stack.

Two essential parts of a recursive function:
1. Base case
2. Different Input

e.g. 
  function sumRange(num) {
    if(num === 1) return 1;

    return sumRange(num) + sumRange(num - 1);
  }

e.g. 
function factorial(num) {
  if(num === 1) return 1;

  return num * factorial(num - 1);
}


=> Common Recursion pitfall:
  - No base case
  - Forgetting to return or return wrong thing
  - stack overflow

=> Helper method Recursion pattern:

  function outer(input) {
    let outerScopedVariable = [];

    function helper(helperInput) {
      // Modify the outerScopedVariable here

      helper(helperInput --);
    }

    helper(input);

    return outerScopedVariable;
  }


=> Pure Recursion method:

function collectOddValues(arr) {
  let newArr = [];

  if (arr.length === 0) return newArr;

  if(arr[0] % 2 !== 0) newArr.push(arr[0]);

  newArr = newArr.concat(collectOddValues(arr.slice(1)));

  return newArr;
}
